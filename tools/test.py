import sys
import os
from math import isclose
#This is pretty:


def compare(right: list, my_texts: list) -> bool:
    """compares the right text to texts given by our cvc

    Parameters
    ----------
    text : list of string
        line from tsv by varscan
    my_texts : list of lists of strings
        all lines for given position given by our cvc
    """
    if len(my_texts) == 0:
        return False
    for my in my_texts:
        if (my[0] == right[0] and my[1] == right[1] and my[2] == right[2] and my[3] == right[3]):
            return True
    return False
def compare_detailed(right: list, my_texts: list) -> bool:
    """compares the right text to texts given by our cvc

    Parameters
    ----------
    text : list of string
        line from tsv by varscan
    my_texts : list of lists of strings
        all lines for given position given by our cvc
    """
    for my in my_texts:
        my_forward = int(my[4]) + int(my[6])
        my_reverse = int(my[5]) + int(my[6])
        right_forward = int(right[4])
        right_reverse = int(right[5])
        if (my_forward==right_forward and my_reverse==right_reverse or (my_forward==right_reverse and my_reverse == right_forward)):
            return True
        
        # if (my_forward == right_forward
        #     and my_reverse == right_reverse):
        #     return True
    return False
def compare_dp(right: list, my_texts: list) -> bool:
    """compares the right text to texts given by our cvc

    Parameters
    ----------
    text : list of string
        line from tsv by varscan
    my_texts : list of lists of strings
        all lines for given position given by our cvc
    """
    for my in my_texts:
        if (int(my[7])==int(right[7])
            and int(my[8])==int(right[8])):
            return True
    return False


#This is a little bit ugly
if len(sys.argv) == 1 or sys.argv[1] == "-h" or sys.argv[1] == "--help":
    print("\n  Compare tsv generated by CVC with tsv generated by Varscan and varscanVcf2tsv.awk")
    print("  Before calling this script, sort both files by `sort -k2 -t \\t -n`")
    print("    Usage: python3 test.py [cvc.tsv] [varscan.tsv]\n")
    exit(0)

my_name = sys.argv[1]
right_name = sys.argv[2]

print(f"Comparing {my_name} with {right_name}")

# This is getting more ugly...
my = open(my_name, "r")
right = open(right_name, "r")
right.readline()
my_text = my.readline().split('\t')

success = 0
failure = 0
dp_failure =0
partial_failures = 0
grep_passes = 0

for line in right:
    text = line[:-1].split('\t')
    while (my_text[0] == text[0] and my_text[1] < text[1]) or (my_text[0] < text[0]):
        # Yes we really want to compare strings, because bash-sort sorts as strings
        my_text = my.readline().split('\t')

    if my_text[1] == text[1]:
        my_texts = []
        while len(my_text)>1 and my_text[1] == text[1]:
            my_texts.append(my_text)
            my_text = my.readline().split('\t')
        if (compare(text, my_texts)):
            if (compare_detailed(text, my_texts)):
                if compare_dp(text,my_texts):
                    success += 1
                else:
                    print(f"DP: {my_texts} X {text}")  
                    dp_failure +=1
            else:
                print(f"Partial: {my_texts} X {text}")  
                partial_failures +=1
        else:
            failure += 1
            print(f"{my_texts} doesn't match {text}")        
    # This wasn't so bad, was it? At least it made some sence...
    # Now brace yourselves!

    else:
        froms_grep = os.popen(f"grep '{text[1]}' {my_name}").read().split('\n')
        # Wow! This is ugly, it just calls the bash `grep` command on the whole file!
        # Then splits it into single lines
        # This is because I don't want to solve why some variants are wrongly skipped...
        # If you want to redo it -> have fun!
        found = False
        for from_grep_txt in froms_grep[:-1]:
            from_grep = from_grep_txt.split('\t')
            # Now every line is split into lists like before, ok?
            if compare(from_grep, text):
                # This if just says if the are equal in the important columns.
                found = True
                break

        if found:
            grep_passes += 1
        else:
            failure += 1
            print(f"No match for {text}")

# You made it through! This is just some printing at the end!
print(f"failures: {failure}")
print(f"dp failures: {dp_failure}")
print(f"direction failures: {partial_failures}")
print(f"grep passes: {grep_passes}")
print(f"successes: {success}")

if (failure):
    print("\nE: DIFFERENCES FOUND!")
else:
    print("\nFiles match!")

my.close()
right.close()
